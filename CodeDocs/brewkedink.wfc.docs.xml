<?xml version="1.0"?>
<doc>
    <assembly>
        <name>brewkedink.wfc</name>
    </assembly>
    <members>
        <member name="T:BrewedInk.WFC.SlotCannotHaveEmptyModuleSetException">
            <summary>
            An exception that is thrown when the WFC tries to remove the last remaining module from a slot's possibility space. A slot cannot have zero possibilities.
            </summary>
        </member>
        <member name="T:BrewedInk.WFC.SlotCannotSelectUnavailableModule">
            <summary>
            An exception that is thrown if a slot tries to select a module that is no longer possible, due to constraints.
            </summary>
        </member>
        <member name="T:BrewedInk.WFC.ModuleSet">
            <summary>
            A ModuleSet is a collection of modules. It is a HashSet, with a few helpful methods attached to it. 
            </summary>
        </member>
        <member name="T:BrewedInk.WFC.WFCProgress">
             <summary>
             The <see cref="T:BrewedInk.WFC.WFCProgress"/> class represents a unit of progress in the WFC algorithm. As the algorithm is run, a sequence of WCFProgress items will be returned.
             Different types of progress will be returned, and you can switch on the type to gain insights to the algorithm's decisions...
            
             <see cref="T:BrewedInk.WFC.SlotModuleRemoved"/>
             <see cref="T:BrewedInk.WFC.WFCError"/>
             </summary>
        </member>
        <member name="T:BrewedInk.WFC.WFCError">
            <summary>
            A WFCError instance could be returned by the WFC algorithm. If you receive one of these instances, it means something with the process has broken.
            </summary>
        </member>
        <member name="T:BrewedInk.WFC.SlotModuleRemoved">
            <summary>
            A progress instance that explains what module was removed from a slot's possibility space.
            </summary>
        </member>
        <member name="F:BrewedInk.WFC.SlotModuleRemoved.slot">
            <summary>
            The slot that has had a module removed.
            </summary>
        </member>
        <member name="F:BrewedInk.WFC.SlotModuleRemoved.module">
            <summary>
            The module that is no longer available for the slot
            </summary>
        </member>
        <member name="T:BrewedInk.WFC.GenerationSpace">
            <summary>
            Testing comments in Generation Space!!!
            </summary>
        </member>
        <member name="M:BrewedInk.WFC.GenerationSpace.#ctor(System.Collections.Generic.List{BrewedInk.WFC.Slot},System.Collections.Generic.List{BrewedInk.WFC.SlotEdge},BrewedInk.WFC.ModuleSet,System.Nullable{System.Int32})">
            <summary>
            Create a new instance of the WFC algorithm. Each time you construct an instance of the Generation Space, you are setting up a new superposition with nothing collapsed.
            You can also use utility methods to create a new Generation space. <see cref="M:BrewedInk.WFC.GenerationSpace.From2DGrid(System.Int32,System.Int32,BrewedInk.WFC.ModuleSet,System.Nullable{System.Int32},System.Action{System.Collections.Generic.List{BrewedInk.WFC.Slot},System.Collections.Generic.List{BrewedInk.WFC.SlotEdge}})"/> 
            </summary>
            <param name="slots">A set of slots to perform the WFC on. Every slot will be assumed to have every module as a possibility</param>
            <param name="edges">A set of edges that connect the slots. </param>
            <param name="allModules">A set of all the modules, with the constraints already provided</param>
            <param name="seed">An optional random seed. If you provide the same seed, the WFC algorithm will produce the same output given the same inputs. </param>
        </member>
        <member name="M:BrewedInk.WFC.GenerationSpace.GetSlot(UnityEngine.Vector3Int)">
            <summary>
            Find a slot given a position. If no slot exists at the given position, this method will return null.
            </summary>
            <param name="coordinate"></param>
            <returns>The slot at the given position, or null if none exists</returns>
        </member>
        <member name="M:BrewedInk.WFC.GenerationSpace.GetSlotOptions(BrewedInk.WFC.Slot)">
            <summary>
            
            </summary>
            <param name="slot"></param>
            <returns></returns>
        </member>
        <member name="T:BrewedInk.WFC.Module">
            <summary>
            In the WFC algorithm, a module is a possibility for some <see cref="T:BrewedInk.WFC.Slot"/>
            </summary>
        </member>
        <member name="F:BrewedInk.WFC.Module.Display">
            <summary>
            Every module must have a unique display name. This name is used for hashing and equality checks.
            </summary>
        </member>
        <member name="F:BrewedInk.WFC.Module.Constraints">
            <summary>
            Every module has a set of <see cref="T:BrewedInk.WFC.ModuleConstraint"/>. At the start of the WFC algorithm, every module is possible in all slots.
            The constraints for the module in each slot are all still plausible. As the Wave Function collapses, module possibilities are removed, and various constraints become
            impossible to fulfill. When that happens, this module becomes invalid itself. 
            </summary>
        </member>
        <member name="T:BrewedInk.WFC.Slot">
             <summary>
             In the WFC algorithm, a Slot is a place that holds one <see cref="T:BrewedInk.WFC.Module"/>. As the Wave Function is being collapsed, the slot may have many potential modules available to it.
             As the collapse continues, modules are removed as possibilities from the slot, until there is only one module possible for the slot.
            
             </summary>
        </member>
        <member name="F:BrewedInk.WFC.Slot.Coordinate">
            <summary>
            The slot's position in the larger generation space. 
            </summary>
        </member>
        <member name="T:BrewedInk.WFC.SlotEdge">
            <summary>
            A SlotEdge is the connection between two slots. In a simple 2D 1X2 grid case, there are two slots, and one slot edge connecting them.
            The term "edge" comes from Graph Theory. These edges are directional.
            </summary>
        </member>
        <member name="F:BrewedInk.WFC.SlotEdge.Source">
            <summary>
            The origin slot of the edge. 
            </summary>
        </member>
        <member name="F:BrewedInk.WFC.SlotEdge.Target">
            <summary>
            The destination slot of the edge. 
            </summary>
        </member>
    </members>
</doc>
